
消息转发的全过程，基本如图中显示的这样子，但是：
当resolveInstanceMethod方法返回YES的时候，系统会再次进入cache list和method list里面去寻找方法的实现，如果此时并没有在resolveInstanceMethod方法>里面动态的添加传入方法selector的实现，系统仍然会进入后面的消息转发
消息的转发，就是resolveInstanceMethod方法返回NO，之后的方法调用

一般方法runtime的相应流程如下：
1. runtime消息传递
   objc_msgSend
2. 动态方法解析
   + (BOOL)resolveInstanceMethod
3. 消息转发（前提是：动态方法解析，返回值为NO）
   forwardingTargetForSelector（）
   methodSignatureForSelector(前提是forwardingTargetForSelector方法返回为nil)
   forwardInvocation
以下情况会crash
   forwardingTargetForSelector方法返回的target不能处理改selector
   methodSignatureForSelector返回不能为空
   forwardInvocation不能正常响应，或者调用doesNotRecognizeSelector方法

-methodSignatureForSelector与-forwardingTargetForSelector:，两个方法就相当于一个是返回方法的method，另一个则根据前者方法返回的method生成相应的NSInvocation,然后再确定target去调用。

objc的运行时会给出三次拯救程序崩溃的机会：
    1. Method resolution
       objc运行时会调用+resolveInstanceMethod:或者 +resolveClassMethod:，让你有机会提供一个函数实现。如果你添加了函数，那运行时系统就会重新启动一次消息发送的过程，否则 ，运行时就会移到下一步，消息转发（Message Forwarding）。
    2. Fast forwarding
       如果目标对象实现了-forwardingTargetForSelector:，Runtime 这时就会调用这个方法，给你把这个消息转发给其他对象的机会。 只要这个方法返回的不是nil和self，整个消息发送的过程就会被重启，当然发送的对象会变成你返回的那个对象。否则，就会继续Normal Fowarding。 这里叫Fast，只是为了区别下一步的转发机制。因为这一步不会创建任何新的对象，但下一步转发会创建一个NSInvocation对象，所以相对更快点。
    3. Normal forwarding
       这一步是Runtime最后一次给你挽救的机会。首先它会发送-methodSignatureForSelector:消息获得函数的参数和返回值类型。如果-methodSignatureForSelector:返回nil，Runtime则会发出-doesNotRecognizeSelector:消息，程序这时也就挂掉了。如果返回了一个函数签名，Runtime就会创建一个NSInvocation对象并发送-forwardInvocation:消息给目标对象

一般方法规则：
Objective-C中的方法默认被隐藏了两个参数：self和_cmd。self指向对象本身，_cmd指向方法本身。 
被指定为动态实现的方法的参数类型有如下的要求： 
A.第一个参数类型必须是id（就是self的类型） 
B.第二个参数类型必须是SEL（就是_cmd的类型） 
C.从第三个参数起，可以按照原方法的参数类型定义， 
如:-(void)setName:(NSString)*name 对应Type Encoding为v@:@ 
最后的@表示参数name的类型
