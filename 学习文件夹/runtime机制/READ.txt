runtime实现机制
runtime是一套比较底层的纯C语言API，属于1个C语言库，包含了很多底层的C语言API。
在我们平时编写的OC代码中，程序运行过程中，其实最终都是转成runtime的C语言代码，runtime算是OC的幕后工作者。
例如：
OC：[[MJPerson alloc]init]=====>
runtime：objc_msgSend(objc_msgSend(“MJPerson”,”allow”),”init”)

+load能保证在类的初始化过程中被加载，并保证这种改变应用级别的行为的一致性。相比之下，+initialize在其执行时不提供这种保证—事实上，如果在应用中没为给这个类发送消息，则它可能永远不会被调用。

runtime用途：
1.在程序运行过程中，动态创建一个类（比如KVO的底层实现—————MJExtension处理数据模型）
2.在程序运行过程中，动态地为某个类添加属性\方法，修改属性值\方法（比如：对类别进行属性扩展，通过改变方法名指针指向来交换方法的实现）
例如：交换方法实现
Method ori_Method = class_getInstanceMethod([NSArray class], @selector(lastObject));
Method my_Method = class_getInstanceMethod([NSArray class], @selector(myLastObject));
method_exchangeImplementations(ori_Method, my_Method);
注意：swizzling（交换）应该总是在+load中执行
     swizzling应高只是在dispatch_once中执行
例如：动态添加方法
是在类里，通过实现+ (BOOL)resolveInstanceMethod:(SEL)sel{}方法（而该方法由底层自己调用），去动态添加方法
3.遍历一个类的所有成员变量（属性）\所有方法（因为NSObject在runtime里就是一个结构体）


+load的执行顺序是先类，后category，而category的+load执行顺序是根据编译顺序决定的。


category对类进行扩展的时候需要注意的有两点：
1)、category的方法没有“完全替换掉”原来类已经有的方法，也就是说如果category和原来类都有methodA，那么category附加完成之后，类的方法列表里会有两个methodA
2)、category的方法被放到了新方法列表的前面，而原来类的方法被放到了新方法列表的后面，这也就是我们平常所说的category的方法会“覆盖”掉原来类的同名方法，这是因为运行时在查找方法的时候是顺着方法列表的顺序查找的，它只要一找到对应名字的方法，就会罢休^_^，殊不知后面可能还有一样名字的方法。


————————————————————————————————————————————————————————————————————————————————————
————————category类别————————————
category的另外两个使用场景1
(1)可以把类的实现分开在几个不同的文件里面。这样做有几个显而易见的好处，a)可以减少单个文件的体积 b)可以把不同的功能组织到不同的category里 c)可以由多个开发者共同完成一个类 d)可以按需加载想要的category 等等。
(2)声明私有方法
————————extension————————————
// extension
@interface MyObject(){
    int iextension;
}
-(void)testInExtension;// 类的mainimplementation不实现的话，有编译警告。
@end
使用Extension需要注意的点：
(1) Extension中的方法必须在@implementation中实现，否则编译会报错。

对比-category和extension：———————>
extension看起来很像一个匿名的category，但是extension和有名字的category几乎完全是两个东西。 extension在编译期决议，它就是类的一部分，在编译期和头文件里的@interface以及实现文件里的@implement一起形成一个完整的类，它伴随类的产生而产生，亦随之一起消亡。extension一般用来隐藏类的私有信息，你必须有一个类的源码才能为一个类添加extension，所以你无法为系统的类比如NSString添加extension。（详见2）
但是category则完全不一样，它是在运行期决议的。
就category和extension的区别来看，我们可以推导出一个明显的事实，extension可以添加实例变量，而category是无法添加实例变量的（因为在运行期，对象的内存布局已经确定，如果添加实例变量就会破坏类的内部布局，这对编译型语言来说是灾难性的）。
1、形式上来看，extension是匿名的category。
2、extension里声明的方法需要在mainimplementation中实现，category不强制要求。
3、extension可以添加属性（变量），category不可以。
————————————————————————————————————————————————————————————————————————

extern可置于变量或者函数前，以表示变量或者函数的定义在别的文件中，提示编译器遇到此变量或函数时，在其它模块中寻找其定义。

元类的定义：元类是类对象的类。
简单说就是：
当你给对象发送消息时，消息是在寻找这个对象的类的方法列表。
当你给类发消息时，消息是在寻找这个类的元类的方法列表。
元类是必不可少的，因为它存储了类的类方法。每个类都必须有独一无二的元类，因为每个类都有独一无二的类方法。


objc_cache
上面提到了objc_class结构体中的cache字段，它用于缓存调用过的方法。

objc_object与id
id，它是一个objc_object结构类型的指针。它的存在可以让我们实现类似于C++中泛型的一些操作。该类型的对象可以转换为任何一种对象，有点类似于C语言中void *指针类型的作用。

————————————————————————————————————方法和消息————————————————————————————————————
1.SEL——实际上就是根据方法名hash化了的一个字符串，能唯一代表一个方法，它的存在只是为了加快方法的查询速度
又叫选择器，是表示一个方法的selector的指针typedef struct objc_selector *SEL;
Objective-C在编译时，会依据每一个方法的名字、参数序列，生成一个唯一的整型标识(Int类型的地址)，这个标识就是SEL
两个类之间，不管它们是父类与子类的关系，还是之间没有这种关系，只要方法名相同，那么方法的SEL就是一样的。每一个方法都对应着一个SEL。所以在 Objective-C同一个类(及类的继承体系)中，不能存在2个同名的方法，即使参数类型不同也不行。相同的方法只能对应一个SEL。这也就导致 Objective-C在处理相同方法名且参数个数相同但类型不同的方法方面的能力很差
当然，不同的类可以拥有相同的selector，这个没有问题。不同类的实例对象执行相同的selector时，会在各自的方法列表中去根据selector去寻找自己对应的IMP。

2.IMP实际上是一个函数指针，指向方法实现的首地址

3.Method
typedef struct objc_method *Method;
struct objc_method {
    SEL method_name                 OBJC2_UNAVAILABLE;  // 方法名
    char *method_types                  OBJC2_UNAVAILABLE;
    IMP method_imp                      OBJC2_UNAVAILABLE;  // 方法实现
}
可以看到该结构体中包含一个SEL和IMP，实际上相当于在SEL和IMP之间作了一个映射。有了SEL，我们便可以找到对应的IMP，从而调用方法的实现代码。
——————————————————————————————————————————————————————————————————————————————
class_addMethod的实现会覆盖父类的方法实现，但不会取代本类中已存在的实现，如果本类中包含一个同名的实现，则函数会返回NO。