| [leichunfeng/MVVMReactiveCocoa](https://github.com/leichunfeng/MVVMReactiveCocoa)| **推荐！一个完整的使用MVVM和RAC的Github客户端
ReactiveCocoa也能有效地减少代码量
ReactiveCocoa简称为RAC
ReactiveCocoa编程思想：
ReactiveCocoa结合了几种编程风格：
        函数式编程
        响应式编程
--ReactiveCocoa被描述为函数响应式编程框架。使用RAC解决问题，特点：
       不需要考虑调用顺序，直接考虑结果
       把每一次操作都写成一系列嵌套的方法中，使代码高聚合，方便管理

——ReactiveCocoa开发中常见用法
  代替代理
  代替KVO(此外不需要担心会造成内存问题，因为对于KVO没有添加观察者与移除观察者的概念)
  监听事件
  代替通知
  监听文本框文字改变
  处理当界面多次请求时，需要都获取到数据时，才能展示界面

基础类：
RACSignal：信号流
RACSubscriber：接受者（也有只要遵循RACSubscriber协议，都可以成为RACSubscriber）
RACDisposable：用来清理和释放内存的
RACCommand:类用于表示事件的执行，一般来说是在UI上的某些动作来触发这些事件，比如点击一个按钮。
          按钮的点击事件，会触发RACCommand调用execute方法
          同时RACCommand的SignalBlock会在execute的时候调用
          注意：SignalBlock调用的时候，返回值需要是RACSignal,这个时候，可以对该信号进行订阅等操作
          RACCommand的executing属性，用于判断是否正在执行RACCommand的execute操作，其实本质还是一  个RACSignal信号默认是以startWith:@NO开始的，发送的信号值是NSNmuber类型的
RACSequence:RAC中的集合类，用于代替NSArray,NSDictionary,可以使用它来快速遍历数组和字典。

RACCompoundDisposable是一个RACDisposable管理工具
RACScheduler通过调度block来完成对事件传送的操作，可以通过销毁通过schedule方法返回的RACDisposable对    象来去掉已经在调度中（scheduling）的block

RACTuple只是NSInvocation的一种映射，可以获取到NSInvocation传入的参数，一般可以通过first、second等获取第一个参数、第二个参数等，以此类推。
宏：
RACObserve其实就是简单的对rac_valuesForKeyPath:observer:进行包装，因此它返回的也是一个信号

takeUntil:(RACSignal *):获取信号直到某个信号执行完成

方法：
rac_signalForSelector中创建了一个subject(一个可以手动控制进行sendNext的信号), 做了很复杂的swizzling, 其中和发送信号相关的是RACSwizzleForwardInvocation, 这个方法改写了原本的forwardInvocation. 然后将自己的对应selector的方法替换成forwardInvocation，这个forwardInvocation里面会调用[subject sendNext:]发送信号给subscriber.