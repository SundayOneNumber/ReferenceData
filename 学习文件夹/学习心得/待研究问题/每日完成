

3.29   看了sunnyxx博客里面对Objective-C Class Ivar Layout 探索，动态添加ivar的属性修饰符（_weak,_strong,unsafe_unretained）

3.30   实现了类似ReactiveCocoa里面rac_signalForSelector:方法，通过动态创建类对象，并使当前实例对象通过方法objc_setClass(obj,class)来实现对动态创建类对象的继承关系，使该实例对象具有动态创建类对象的方法，以达到修改方法的目的

3.31   tableView动态改变cell的高度，通过tableView beginUpdate与endUpdate方法实现，通过可以通过UIView和CATrasition去改变默认的动画周期以及添加动画完成时block回调（另外，也引出了如何改变隐式动画的周期，并为其添加动画完成的block回调）

4.8   理解贝塞尔曲线和三阶贝塞尔曲线如何形成 CAMediaTimingFunction 时间程度曲线

4.9   CoreAnimation 的理解（不仅仅只用来做动画的，也用来管理layer层）
      layer 层的结构：modelLayer、presentationLayer、渲染树（保存着 presentationLayer 渲染显示的相关数据）
      类似 SDWebImage 图片处理优化，了解网络图片显示的大体步骤，以及优化思路，其中需要注意：在位图数据不是字节对齐的时候 CoreAnimation 会 copy 一份位图数据并进行字节对齐，以及这个 UIImageView 是通过 layer 的 content 设置 image 为待显示的对象， layer 层的渲染是通过 Core Animation 进行的，
      CoreAnimation 相对于 CoreGraphics 有很多优点：
      1. CALayer 只需要一些与自己相关的内存：只有它的寄宿图会消耗一定的内存空间
      2. CoreAnimation 较 CoreGraphics 效率高，因为 CoreAnimation 是基于 OpenGL 与 Core Graphics 两者之上的
      UIGraphicsBeginImageContextWithOptions 与 CGBitmapContextCreate 区别：UIGraphicsBeginImageContextWithOptions 是通过 UIKit 的方法去加载 context 的，并且是线程安全的，而且仅仅只是在 main thread 才能生效
      UIGraphicsBeginImageContextWithOptions 与 drawRect 内存消耗，都是一样的，只是 UIGraphicsBeginImageContextWithOptions 创建的寄宿图，可以通过 UIGraphicsEndImageContext方法去手动释放，而 drawRect 创建的寄宿图会一直存在，直到该 view 被释放掉
      