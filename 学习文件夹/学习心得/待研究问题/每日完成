

3.29   看了sunnyxx博客里面对Objective-C Class Ivar Layout 探索，动态添加ivar的属性修饰符（_weak,_strong,unsafe_unretained）

3.30   实现了类似ReactiveCocoa里面rac_signalForSelector:方法，通过动态创建类对象，并使当前实例对象通过方法objc_setClass(obj,class)来实现对动态创建类对象的继承关系，使该实例对象具有动态创建类对象的方法，以达到修改方法的目的

3.31   tableView动态改变cell的高度，通过tableView beginUpdate与endUpdate方法实现，通过可以通过UIView和CATrasition去改变默认的动画周期以及添加动画完成时block回调（另外，也引出了如何改变隐式动画的周期，并为其添加动画完成的block回调）

4.8   理解贝塞尔曲线和三阶贝塞尔曲线如何形成 CAMediaTimingFunction 时间程度曲线

4.9   CoreAnimation 的理解（不仅仅只用来做动画的，也用来管理layer层）
      layer 层的结构：modelLayer、presentationLayer、渲染树（保存着 presentationLayer 渲染显示的相关数据）
      对于 layer 层的代理方法 - (void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx  ：
      CATiledLayer 是 background thread 调用的 
      CALayer 的 drawsAsynachronously 属性设置为 YES 时，是在 main thread 上调用的，但是方法里面的 CG 开头的命令会被存储，之后再在 background thread 上去执行
      类似 SDWebImage 图片处理优化，了解网络图片显示的大体步骤，以及优化思路，其中需要注意：在位图数据不是字节对齐的时候 CoreAnimation 会 copy 一份位图数据并进行字节对齐，以及这个 UIImageView 是通过 layer 的 content 设置 image 为待显示的对象， layer 层的渲染是通过 Core Animation 进行的，
      CoreAnimation 相对于 CoreGraphics 有很多优点：
      1. CALayer 只需要一些与自己相关的内存：只有它的寄宿图会消耗一定的内存空间
      2. CoreAnimation 较 CoreGraphics 效率高，因为 CoreAnimation 是基于 OpenGL 与 Core Graphics 两者之上的
      UIGraphicsBeginImageContextWithOptions 与 CGBitmapContextCreate 区别：UIGraphicsBeginImageContextWithOptions 是通过 UIKit 的方法去加载 context 的，并且是线程安全的，而且仅仅只是在 main thread 才能生效
      UIGraphicsBeginImageContextWithOptions 与 drawRect 内存消耗，都是一样的，只是 UIGraphicsBeginImageContextWithOptions 创建的寄宿图，可以通过 UIGraphicsEndImageContext方法去手动释放，而 drawRect 创建的寄宿图会一直存在，直到该 view 被释放掉

4.10  block 实现原理(__block 关键字)
      weak 关键字， runtime 通过实现原理（runtime 动态创建 class 的时候，如何添加 weak 属性）
      id 类型是一个 Objective-C 对象，但并不都是指向继承自 NSObject 的对象，即使这个类型和 NSObject 对象有很多共同的方法，（id 它只是简单地申明了指向对象的指针，没有给编译器任何类型信息，因此，编译器不会做类型检查，可以发送任何信息给 id 类型的对象，都不会产生编译错误）
      NSObject 与 <NSObject> 两者之间有什么关系， <NSObject> 协议只是，NSProxy 与 NSObject 是同一级别的， Foundation/Cocoa 对象并不都继承自 NSObject,很有一些和 NSObject 一样级别的根类，
      NSObject 协议定义了一套基础方法（所有的根类都可以去实现），也就是说 <NSObject> 协议里方法或者属性只是 NSObject 对象中的最基础方法或者属性。
      NSProxy 遵循 <NSObject> 协议意味着你可以依靠实现 NSProxy 来实现 NSObject 方法。
      NSProxy 的作用：建立 proxy 对象，通常是为了留给大多数未实现的方法，所以他们就可以使用一个forwardInvocation: 方法来转发。把 NSObject 作为子类则可能会引入更多包，那样将会冲突。而 NSProxy 可以避免，因为提供了一个简单的超类，所以不会有多余的东西在里面。
      UIGraphicsBeginImageContextWithOptions 与 drawRect 都是在线程上进行的（除了 CATiledLayer 与 CALayer 的 drawsAsynachronously）
      
4.10  大文件下载（通过对 NSURLConnection、NSURLSession 的使用）
      图片解码通过 background thread 对 bitmap 位图的创建，来进行性能优化（理解代码的含义，见SDWebImage理解中缓存工程）

4.13 BLOCK 会对 self 进行 retain，而对 全局变量或者静态变量不会进行 retain，主要原因是：全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量（个人认为：block 会现根据变量的内存地址是属于全局区还是哪一块进行判断）。
      全局变量也称为外部变量，它是在函数外部定义的变量。它不属于哪一个函数，它属于一个源程序文件。其作用域是整个源程序。在函数中使用全局变量，一般应作全局变量说明。 只有在函数内经过说明的全局变量才能使用。全局变量的说明符为 extern。但在一个函数之前定义的全局变量，在该函数内使用可不再加说明

4.14 自动释放池
     NSThread (创建线程去调用方法的时候，底层会生成一个 autoReleasePool 自动释放池————自动释放池的创建于销毁对应的方法是 push 与 pop,是对 runloop 进行监听，runloop 进入的时候，激活最大优先级的 observer 去创建自动释放池，保证在所有对象被引用或者创建时被加入自动释放池，runloop 退出的时候，激活最小优先级的 observer 去销毁自动释放池，保证销毁所有需要销毁的对象——————另外：自动释放池对象是一个 class，里面存储着添加到自动释放池所有对象的地址,通过 id *next 指向，当一个自动释放池满的时候，会另创建一个 autoreleasepool 去存储加入释放池的对象，原释放池通过 child 指向新创建的释放池，新创建的释放池通过 parent 指向原释放池，有点类似双向链表的存储结构)
     runloop（ 有这种情况，runloop 会被回收 app退出；线程关闭；设置最大时间到期；modeItem为空；）
     1. 给子线程的 runloop 添加 source1 ,使其不会退出 exit runloop(一般通过挪用run才会实现 runloop 循环,需要注意的是 addPort 一般写在 run 前面(这也是在程序中保证子线程一直存活的方式)，因为 run 方法一旦没有 source 或者 timer 的生活，就会直接 exit runloop )
     2. 经过创建子线程测试，没有手动添加 input source 的时候，就会直接退出 exit runloop --- 个人理解：创建的子线程，并没有被系统自动添加一些 input source
     3. runMode:beforeDate: 与 run 方法的区别在于：第一个可以设置超时时间，超过超时时间，就会退出 runloop，而 run 缺一致处于 runloop 循环中 (CFRunLoopRunInMode 就是对 runMode:beforeDate: 方法的封装)
     GCD 
     GCD 的计时器，使用的避免了 NSTimer 的缺点：1.必须保证有一个活跃的runloop。2.NSTimer的创建与撤销必须在同一个线程操作、performSelector的创建与撤销必须在同一个线程操作。3.内存管理有潜在泄露的风险

4.16
     GCD—dispatch_sync/dispatch_async/dispatch_barrier_sync/dispatch_barrier_async 四者异同点：dispatch_sync、dispatch_async 在串行对列和 global queue 中起作用，dispatch_barrier_sync 、dispatch_barrier_async 在 dispatch_queue_create 创建的 concurrent queue 上起作用，另外 sync / async 区别在于：sync 会等待传入的 Block 完成后，才会 return ,也不会在 on the queue 执行 retain 操作，也不会对 block 进行 block_copy 操作, async 会立刻 return ,会 retain；此外 dispatch_async 在串行队列里，会虽然会立刻 return ,但是传入的 block并不会立刻被 invoke,知道前面的 block 完成，或者所在线程（前提是传入的队列也是该线程的队列）任务完成才会被 invoke ，如：
     NSLog(@"主线程开始");
        dispatch_async(dispatch_get_main_queue(), ^{
            NSLog(@"等待主线程完成");
        });
        sleep(5);
        NSLog(@"主线程完成");
        CFRunLoopRun();// 换成 while(1);就会一直不调用 dispatch_async 传入的 block，因为当前线程的任务一直没有被完成，至于为何 CFRunLoopRun(）可以，个人理解：这是因为 CFRunLoopRun(),会使当前线程处于循环状态（有事情就处理，没事情就休眠），直到有 exit runloop 发生，才会结束
        另外需要注意：在非主队列的 serial queue 上 CFRunLoopRun（）需要被调用，才能看出效果，不然runloop 不会被激活，当前线程执行完，会结束线程，导致 GCD async 里面的 block 不会被 invoke(GCD 与 Runloop 的关系是，每循环一次 runloop 都会询问 GCD 里面是否有需要执行的任务(GCD 相当于 runloop 的 source0)，到指定的 queue 上执行Block),这一点可以用在更新 UI，因为更新 UI 界面（Core Animation 实现图层树的打包，并提交给 GPU ）是在 GPU 上进行的，此时 CPU 是处于等待结果处理完的状态，所以我们可以通过dispatch_async(dispatch_get_main_queue()，^{})实现在更新 UI 的同时，再进行一些其它 UI 的操作，这样可以减少 CPU 的等待时间