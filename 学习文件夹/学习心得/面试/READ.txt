
表单提交 post和get的区别？
1、get方式提交会把参数显示在地址
post方式提交不会把参数显示在地址栏上。（请求体）				
2、get方式敏感信息不安全
   post方式敏感信息相对安全
3、get方式提交，官方限制提交大小仅1KB（但多数浏览器可以提交2KB）
   post方式提交，提交大数据。一般用于附件上传

#import <objc/runtime.h>
runtime——给OC类别，扩展属性
         (关联对象与被关联对象本身的存储并没有直接的关系，它是存储在单独的哈希表中的)
       > 对象地址与AssociationsHashMap哈希表是一一对应的（因此，我们也可以给类对象添加关联对象）
       > 流程： self ---> ObjectAssociationMap对象 ----> ObjectAssociationHashMap

copy、strong、assign存储策略

函数名从本质上说是一个标识符

搜索实现关键字联想（接口端请求获取）
cell根据图片高度来自适应高度，需要服务器端先告诉图片的尺寸，否则无法实现，因为即时刷新效率很低，
swift1.0~2.0区别——字符串获取长度有变：先获取到C的字符串，在获取C字符串的长度
WatchKit使用
视频APP用到的框架以及第三方库
获取iOS设备的内存状况
UIImagePickerController自定义导航栏—因为他也是一个导航控制器，可以修改，其navigationBar
图片渐进加载——大图片会影响性能！

喜欢自定义func myLayoutSubviews()这样是因为系统的LayoutSubviews()不容易控制，在很多情况下会调用，这导致一个可变的frame，出现了可控制性

CGContextFillPath，CGContextClip 使用的是非零绕组规则
CGContextEOClip 使用的是奇偶规则

卷积函数实现图片模糊化

造成循环引用的三种场景：
原因：可以简单地理解为A引用了B，而B又引用了A，双方都同时保持对对方的一个引用，导致任何时候引用计数都不为0，始终无法释放。
第一种：
第二种：block函数
第三张：委托delegate——平时注意申明代理属性的时候，用assign(MRC)或者weak(ARC)，不能使用retain或者strong

—————————————————————————————————block闭包—————————————————————————————————————
block的存储位置:依据block变量是局部变量还是全局、静态变量等等，跟基本变量内存存储是一致的

闭包就是一个函数，或者一个指向函数的指针，加上这个函数执行的非局部变量。
说的通俗一点，就是闭包允许一个函数访问声明该函数运行上下文中的变量，甚至可以访问不同运行上文中的变量。
对于用__block修饰的外部变量引用，block是复制其引用地址来实现访问的

block用到的外部变量，会先被当做实参传入block的底层实现函数中（类似于copy）
因此要想改变外部变量，则通过加__block前缀，对于用__block修饰的外部变量引用，block是复制其引用地址来实现访问的

栈是个存储器，压栈就是往里面存数据，出栈就是取数据

block与delegate的区别：
delegate运行成本低，block成本很高
block出栈需要将使用的数据从栈内存拷贝到堆内存，当然对象的话就是引用计数加一，使用完成或者block置为nil后才消除。
delegate只是保存了一个对象指针，直接回调，没有额外消耗。相对C的函数指针，只多做了一个查表动作
——————————————————————————————————————————————————————————————————————————————
runtime实现机制(Class isa指向对象本身，Class super_class指向父类)
runtime是一套比较底层的纯C语言API，属于1个C语言库，包含了很多底层的C语言API。
在我们平时编写的OC代码中，程序运行过程中，其实最终都是转成runtime的C语言代码，runtime算是OC的幕后工作者。
例如：
OC：[[MJPerson alloc]init]=====>
runtime：objc_msgSend(objc_msgSend(“MJPerson”,”allow”),”init”)

runtime用途：
1.在程序运行过程中，动态创建一个类（比如KVO的底层实现—————MJExtension处理数据模型）
2.在程序运行过程中，动态地为某个类添加属性\方法，修改属性值\方法（比如：对类别进行属性扩展，通过改变方法名指针指向来交换方法的实现）
例如：交换方法实现
Method ori_Method = class_getInstanceMethod([NSArray class], @selector(lastObject));
Method my_Method = class_getInstanceMethod([NSArray class], @selector(myLastObject));
method_exchangeImplementations(ori_Method, my_Method);
3.遍历一个类的所有成员变量（属性）\所有方法（因为NSObject在runtime里就是一个结构体）
4.类别中关联对象


——————————————————————————————————runloop——————————————————————————————
Runloop实现自动释放池、延迟回调、触摸事件、屏幕刷新等功能(runloop说白了也就是一个do{}while循环，)
线程与Runloop之间是一一对应的，其关系是保存在一个全局的Dictionary里。线程刚创建时并没有Runloop，如果你不主动获取，那它一直都不会有。RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 RunLoop（主线程除外）。
一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。
——————————————————————————————————苹果用Runloop实现的功能—————————————————————
AutoreleasePool
事件响应
手势识别
界面更新
定时器
PerformSelecter
关于GCD

Runloop的实际应用举例：
       AFNetworking、AsyncDisplayKit


设计模式：
单例、代理、通知

—————————————————————————————————————————————————
面向对象的程序设置有一下三大原则：
1.封装（Encapsulation），将一个相对独立的逻辑涉及的变量和函数放到一个类中，然后对外暴露少量接口，使其高内聚，低耦合。
2.继承（Inheritance），子类可以继承父类的变量和函数，并且可以修改或扩展父类的行为。
3.多态（Polymorphism），父类的指针可以指向子类的实例，在运行时程序语言支持找到子类对应的函数实现。
在以上三大准则的基础上，再引入一些设计原则，比如：
单一职责原则（Single Responsibility），每个类只应该做一件事情。
不要重复原则（Don’t Repeat Yourself），相同（或相似）的代码不应该重复两次。
好的组合优于继承（Better Composition over Inheritance），尽量使用组合而不是继承来设计。

##已知的编程思想：《参考代码———ReactiveCocoa文件夹》
1>面向过程：处理事情以过程为核心，一步一步的实现。
2>面向对象：万物皆对象
3>链式编程思想：是将多个操作（多行代码）通过点号(.)链接在一起成为一句代码，使代码可读性好。a(1).b(2).c(3),这个点号式，本质（原理）运用到的是OC的setter.getter方法
         链式变成特点：方法的返回值是block,block必须有返回值（本身对象），block参数（需要操作的值）
         代表：masonry框架
4>响应式编程思想：不需要考虑调用顺序，只需要知道考虑结果，类似于蝴蝶效应，产生一个事件，会影响很多东西，这些事件像流一样的传播出去，然后影响结果，借用面向对象的一句话，万物皆是流。
         代表：KVO运用、通知中心。
5>函数式编程思想：是把操作尽量写成一系列嵌套的函数或者方法调用。
         函数式编程特点：每个方法必须有返回值（本身对象），把函数或者Block当做参数，block参数（需要操作的值）block返回值（操作结果）
         代表：ReactiveCocoa

—————————————————————————————————————————————————     

StoryBoard——右击打开source code——>会看见，系统把storyboard转成xml,然后再解析xml,生成相应的代码

——————————————————————数据结构————————————————————
常用结构：
数组、
栈、
队列、
链表、
树、
图、
堆、
散列表
—————————————————————————————————————————————————————————
平时遇到的难点：
1.多参数的OC函数-	(void)test: (int)x number: (int)y;（带标签的）-	(void)test: (int)y : (int)y;不带标签的（不建议）-	(void)test: (NSDictionary *)data,…;swift多参数函数带标签 func test(name:String, age:Int)不带标签func test(name:String,_ age:Int)对于需要参数名的函数，可以在参数名前面加_来强制取消参数名多参数，带标签与不带标签，这一点在JS与OC交互时，尤为重要！因为JS里面的方法名需要与OC方法名一直！2.UITabbarController里面添加tableView的时候，tableView会往下偏移20个像素。解决办法：- (void)viewDidAppear:(BOOL)animated{    [super viewDidAppear:animated];    self.page.tableView.contentInset = UIEdgeInsetsZero;}另外需要注意的是：首次加载的时候，第一个子视图控制器里面的tableView不会加载viewDidAppear方法，因此，此时需要在tabbarViewController里面去手动调用viewDidAppear方法3.JS与OC交互的时候，如果同样的方法名，但是传的参数类型不一致，则仍然会导致OC方法，无法被调用。

4.
imageV.setImageWithURL(NSURL(string:imageUrl as String),placeholderImage: nil ,completed: { (image, error, imageCachetype) -> Void in })SDWebImage在加载图片的时候，会判断该链接是否为有效链接，如果无效，第二次则不会再去加载请求，也就是说，也不会再调用完成的block代码块，这一点需要注意此外，定位功能也有类似的效果
就是当系统在隐私里把所有的定位权限关闭后，定位成功或者失败的代理方法，是不会走的，但是当单独只设置单个app的定位权限关闭后，定位失败的代理方法是走的———————————————————————————————nonatomic和atomic之间的区别————————————
1.处理器自动保证基本内存操作的原子性
首先处理器会自动保证基本的内存操作的原子性。处理器保证从系统内存当中读取或者写入一个字节是原子的，意思是当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址。奔腾6和最新的处理器能自动保证单处理器对同一个缓存行里进行16/32/64位的操作是原子的，但是复杂的内存操作处理器不能自动保证其原子性，比如跨总线宽度，跨多个缓存行，跨页表的访问。但是处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。
因此，会出现以下一种情况：
nonatomic不保证setter/getter的原语行，所以你可能会取不到完整的东西。比如setter函数里面该表两个成员变量，如果你nonatomic的话，getter可能会取到只更改了其中一个变量时候的状态。

2.使用锁机制实现原子操作
锁机制保证了只有获得锁的线程能够操作锁定的内存区域。JVM内部实现了很多种锁机制，有偏向锁，轻量级锁和互斥锁，有意思的是除了偏向锁，JVM实现锁的方式都用到的循环CAS，当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时候使用循环CAS释放锁。详细说明可以参见文章Java SE1.6中的Synchronized。
这个实现的原理是：setter与getter方法访问同一个属性内存，而该内存被锁起来了，因此，可以达到目的。

3.atomic的意思就是setter/getter这个函数是一个原子操作（原子操作（atomic operation）意为"不可被中断的一个或一系列操作" 。在多处理器上实现原子操作就变得有点复杂）（所谓原子操作，就是该操作绝不会在执行完毕前被任何其他任务或事件打断，也就说，它的最小的执行单位，不可能有比它更小的执行单位，因此这里的原子实际是使用了物理学里的物质微粒的概览）。如果有多个线程同时调用setter的话，不会出现某一个线程执行setter全部语句之前，另一个线程开始执行setter情况，相当于函数头尾加了锁一样。nonatomic不保证setter/getter的原语行，所以你可能会取不到完整的东西。比如setter函数里面该表两个成员变量，如果你nonatomic的话，getter可能会取到只更改了其中一个变量时候的状态。
atomic是线程安全的,nonatomic是线程不安全的。如果只是单线程操作的话用nonatomic最好,因为后者效率高一些。

——————————————————————————————————iOS中网络请求————————————————————————————
iOS中，关于网络请求的接口自下至上有如下几层：
CFSocket
CFNetwork              —>ASIHttpRequest
NSURLConnection        —>AFNetworking
NSURLSession           —>AFNetworking2,Alamofire
NSURLConnection 是基于 CFNetwork 的更高层的封装，提供面向对象的接口，AFNetworking 工作于这一层。
NSURLSession 是 iOS7 中新增的接口，表面上是和 NSURLConnection 并列的，但底层仍然用到了 NSURLConnection 的部分功能 (比如 com.apple.NSURLConnectionLoader 线程)，AFNetworking2 和 Alamofire 工作于这一层。


——————————————————————————————————如何保持高性能—————————————————————————————
圆角效果高效地实现:对于只需要圆角的某些场合，也可以用一张已经绘制好的圆角图片覆盖到原本视图上面来模拟相同的视觉效果。最彻底的解决办法，就是把需要显示的图形在后台线程绘制为图片，避免使用圆角、阴影、遮罩等属性。

目前主流的移动设备情况是：iOS设备会始终使用双缓存（即两个缓冲区）
                     安卓系统是三缓存+垂直同步
app主线程开始在CPU中计算显示内容（视图创建、布局计算、图片编码、文本绘制等），随后CPU会将计算好的内容提交到GPU中去，由GPU进行变换、合成、渲染。随后GPU会把渲染结果提交到帧缓冲区中去，等待下一次VSync信号到来时显示到屏幕上去。
界面卡顿的原因：
           如果在一个Sync时间内，CPU或者GPU没有完成内容提交，则那一帧就会被丢弃，等待下一次机会再显示，而这时显示屏会保留之前的内容不变。这就会造成界面的卡顿。
           （CPU和GPU都可能会阻碍显示流程，造成掉帧现象）

CPU处理时间延长，造成卡顿的主要原因是因为：主线程被阻碍了，而阻碍主线程的任务：主要分为三大类：
     1.文本宽高计算、视图布局计算
     2.文本渲染、图片解码、图片绘制
     3.对象创建、对象调整、对象销毁
文本和布局的计算、渲染、解码、绘制都可以通过各种方式异步执行，但 UIKit 和 Core Animation 相关操作必需在主线程进行。
因此优化的目标是：就是尽量把这些任务从主线程挪走，而挪不走的，就尽量优化性能。

需要注意的是：UIView 和 CALayer 不是线程安全的，并且只能在主线程创建、访问和销毁。
性能优化方案：
一：CPU优化方案
1.对象的创建：——对象的创建会分配内存、调整属性、升职还有读取文件等操作，比较消耗CPU资源
          对象复用（如果对象可以复用，并且复用的代价比释放、创建新对象要小，那么这类对象应当尽量放到一个缓存池里复用。）
          推迟对象的创建时间（比如懒加载，尽量推迟对象创建的时间，并把对象的创建分散到多个任务中去。尽管这实现起来比较麻烦，并且带来的优势并不多，但如果有能力做，还是要尽量尝试一下。）
          轻量级对象代替重量级的对象
          性能敏感的界面不使用Storyboard(通过 Storyboard 创建视图对象时，其资源消耗会比直接通过代码创建对象要大非常多，在性能敏感的界面里，Storyboard 并不是一个好的技术选择。)

2.对象调整：减少对CALayer与UIView关于显示相关的属性（比如frame/bounds/transform）等的修改
          这里特别说一下 CALayer：CALayer 内部并没有属性，当调用属性方法时，它内部是通过运行时 resolveInstanceMethod 为对象临时添加一个方法，并把对应属性值保存到内部的一个 Dictionary 里，同时还会通知 delegate、创建动画等等，非常消耗资源。

3.对象销毁：通常当容器类持有大量对象时，其销毁时的资源消耗就会非常明显。应该尽可能的放到后台线程去释放

4.文本计算：大量文本显示，文本的高度计算尽可能的放到后台线程去，以免阻碍主线程。

5.文本渲染：屏幕上能看到的所有文本内容空间，包括UIWebView，在顶层都是通过CoreText排版的，常见的文本控件 （UILabel、UITextView 等），其排版和绘制都是在主线程进行的，因此当显示大量文本时，CPU的压力会很大，此时，我们应该通过TextKit或最底层的CoreText对文本异步绘制。

6.图片的解码：
  当你使用UIImage或CGImageSource的那几个方法去创建图片时，图片数据并不会立刻解码。图片设置到UIImageView或者CALayer.contents中去，并且CALayer被提交到GPU前，CGImage中的数据才会得到解码。然而这一步是发生在主线程中，并且不可避免。如果想要绕开这个机制，常见的做法是在后台线程先把图片绘制到CGBitmapContext中，然后从Bit马屁直接创建图片。目前常见的网络图片库都自带这个功能。

7.图像的绘制：
  图像的绘制，通过后台线程实现CoreGraphic绘制，然后取得其CGImageRef，然后再回到主线程去显示

二：GPU资源消耗
1.纹理的渲染：当图片过大，超过 GPU 的最大纹理尺寸时，图片需要先由 CPU 进行预处理，这对 CPU 和 GPU 都会带来额外的资源消耗
2.视图的混合：当多个视图（或者说 CALayer）重叠在一起显示时，GPU 会首先把他们混合到一起。如果视图结构过于复杂，混合的过程也会消耗很多 GPU 资源。为了减轻这种情况的 GPU 消耗，应用应当尽量减少视图数量和层次，
3.图片的合成：
  CALayer的border、圆角、阴影、遮盖（mask离屏渲染）
  CASharpLayer 的矢量图形显示，通常会触发离屏渲染（offscreen rendering），而离屏渲染通常发生在 GPU 中.
  当一个列表视图中出现大量圆角的 CALayer，并且快速滑动时，可以观察到 GPU 资源已经占满，而 CPU 资源消耗很少.
  对于只需要圆角的某些场合，也可以用一张已经绘制好的圆角图片覆盖到原本视图上面来模拟相同的视觉效果。最彻底的解决办法，就是把需要显示的图形在后台线程绘制为图片，避免使用圆角、阴影、遮罩等属性。
—————————————————————————————————————————————————————————————————————————————————————
—————————————————————————————————后台线程的实现方式—————————————————————
a.使用GCD
   //切换到线程中执行
   dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                // Do the work in background
                [[MyManager shareInstance] myMethod];
            });

b.使用performSelectorInBackground方法
  [self performSelectorInBackground:@selector(myMethod:) withObject:myObj];

————————————————————————————————个人对变量、参数、方法等内存理解————————————————————————
内存从高地址到低地址一般分为：
系统内核、栈、堆、全局（静态）区、代码区
栈：由系统分配内存，并回收，一般有：局部变量、函数的参数值（需要注意的是：栈的地址分配是自上而下的，因为其先进后出的特点，地址是从高地址向低地址分配）（函数的参数是从右向左依次push到栈中）
堆，一般是由程序员自己分配的new,malloc方法分配的，若程序员不释放，程序结束时可能由OS回收 
一个对象在生成时：
   runtime实现swizzling通过修改类的分发表中selector对应的函数，来修改方法的实现(依旧是修改了method对应的函数指针—貌似可以理解为IMP)