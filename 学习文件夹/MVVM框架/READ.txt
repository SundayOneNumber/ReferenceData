MVC是系统框架MVP（Model-View-Presenter）是用在某个特定页面上的，也就是说MVP的灵活性要远远大于MVC，实现起来也极为复杂MVVM（Model-View-ViewModel）三者依次进化而成MVC->MVP->MVVMMVVM模式—————ReactiveCocoa框架个人理解：
MVVM
Model、View都是与MVC的一样的
主要区分在VM，即ViewModel是用于在Model和View之间起一个桥梁的作用，处理Model的数据，并且把数据需要被处理的逻辑关系已经视图显示逻辑，在VM里去处理

另外可以在ViewModel与Model之间，添加一个DOM，就相当于Model数据源的管理者，因为一个视图的显示，可能有不同的数据源，


MVVM是什么，请简述MVVM的特点以及解决了哪些问题
M(Model)V(比MVC中的V更要广泛点，包括UIView与UIViewController及其子类，View用来显示和交互，UIViewController担当一种类似于桥梁的角色，来使view和ViewModel部分更好地通信)VM(ViewModel)，是一种View层的架构模式，衍生自MVC。
特点：把数据加工的任务从Controller中移到了ViewModel，使得Controller只需要专注于数据调配的工作，ViewModel则去负责数据加工并通过通知机制让View响应ViewModel的改变。
目标：为MVC中的Controller减负

* [功能模块中的类集合](#Examples)
* [Controller - 负责View和ViewModel之间的绑定，另一方面也负责常规的UI逻辑处理。](#JSON_Model)
* [View - 用来呈现用户界面](#JSONString_Model)
* [Model - 用来呈现数据](#Model_contains_model)
* [ViewModel - 存放各种业务逻辑和网络请求](#Model_contains_model_array)